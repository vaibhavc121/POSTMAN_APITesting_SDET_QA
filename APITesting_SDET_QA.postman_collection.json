{
	"info": {
		"_postman_id": "361ff69b-12a7-448d-8ef1-a4cecf33c285",
		"name": "APITesting_SDET_QA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26930687"
	},
	"item": [
		{
			"name": "HTTP Requests",
			"item": [
				{
					"name": "GETRequest",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POSTRequest",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUTRequest",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/364",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"364"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteRequest",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/364",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"364"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "StudentAPIs",
			"item": [
				{
					"name": "get single student data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response. json () ;\r",
									"pm. test (\"Test data type of the response\", () => {\r",
									"pm.expect(jsonData) .to.be.an(\"object\");\r",
									"pm.expect (jsonData.name) .to.be.a(\"string\");\r",
									"pm.expect(jsonData.id).to.be.a(\"string\");\r",
									"pm.expect(jsonData.courses).to.be.an(\"array\");\r",
									"});\r",
									"//test array contents in body\r",
									"pm.test(\"Test array properties\", () => {\r",
									"//courses includes \"Java\"\r",
									"pm.expect(jsonData.courses).to.include (\"Java\");\r",
									"//courses array must include all listed\r",
									"pm.expect(jsonData.courses)\r",
									".to.have.members ( [\"Java\", \"Selenium\"]) ;\r",
									"});\r",
									"\r",
									"//validating json fields in response\r",
									"pm.test(\"value of location field is India\", ()=> {\r",
									"var jsonData = pm.response. json() ;\r",
									"pm.expect(jsonData.id).to.eql(\"1\");\r",
									"pm.expect(jsonData.name).to.eql(\"John\");\r",
									"pm.expect(jsonData.location) .to.eql(\"india\");\r",
									"pm.expect(jsonData.phone).to.eql(\"1234567890\");\r",
									"pm.expect(jsonData.courses[0]) .to.eql (\"Java\");\r",
									"pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all students data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => \r",
									"    {\r",
									"        pm.response.to.have.status (200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test (\"Successful POST request\", () => \r",
									"    {\r",
									"        pm.expect (pm.response.code).to.be.oneOf([200,202]) ;\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\"Status code name has string- OK\", () => {\r",
									"pm.response.to.have.status (\"OK\") ;\r",
									"});\r",
									"\r",
									"pm. test(\"Content-Type header is present\", () => {\r",
									"pm.response. to.have.header (\"Content-Type\") ;\r",
									"});\r",
									"\r",
									"pm. test (\"Content-Type header is application/json\", () =>\r",
									"{\r",
									"    pm.expect (pm. response.headers.get ('Content-Type')) . to.eql ('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", () => {\r",
									"pm.expect(pm.response.responseTime).to.be.below(10);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create new student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => \r",
									"    {\r",
									"        pm.response.to.have.status (200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test (\"Successful POST request\", () => \r",
									"    {\r",
									"        pm.expect (pm.response.code).to.be.oneOf([200,202]) ;\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\"Status code name has string- OK\", () => {\r",
									"pm.response.to.have.status (\"OK\") ;\r",
									"});\r",
									"\r",
									"pm. test(\"Content-Type header is present\", () => {\r",
									"pm.response. to.have.header (\"Content-Type\") ;\r",
									"});\r",
									"\r",
									"pm. test (\"Content-Type header is application/json\", () =>\r",
									"{\r",
									"    pm.expect (pm. response.headers.get ('Content-Type')) . to.eql ('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", () => {\r",
									"pm.expect(pm.response.responseTime).to.be.below(10);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"name\": \"John\",\r\n    \"location\": \"india\",\r\n    \"phone\": \"1234567890\",\r\n    \"courses\": [\r\n      \"Java\",\r\n      \"Selenium\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => \r",
									"    {\r",
									"        pm.response.to.have.status (200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test (\"Successful POST request\", () => \r",
									"    {\r",
									"        pm.expect (pm.response.code).to.be.oneOf([200,202]) ;\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\"Status code name has string- OK\", () => {\r",
									"pm.response.to.have.status (\"OK\") ;\r",
									"});\r",
									"\r",
									"pm. test(\"Content-Type header is present\", () => {\r",
									"pm.response. to.have.header (\"Content-Type\") ;\r",
									"});\r",
									"\r",
									"pm. test (\"Content-Type header is application/json\", () =>\r",
									"{\r",
									"    pm.expect (pm. response.headers.get ('Content-Type')) . to.eql ('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", () => {\r",
									"pm.expect(pm.response.responseTime).to.be.below(10);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"name\": \"vaibhav\",\r\n    \"location\": \"india\",\r\n    \"phone\": \"1234567890\",\r\n    \"courses\": [\r\n      \"Java\",\r\n      \"Selenium\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/c7fc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"c7fc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => \r",
									"    {\r",
									"        pm.response.to.have.status (200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test (\"Successful POST request\", () => \r",
									"    {\r",
									"        pm.expect (pm.response.code).to.be.oneOf([200,202]) ;\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\"Status code name has string- OK\", () => {\r",
									"pm.response.to.have.status (\"OK\") ;\r",
									"});\r",
									"\r",
									"pm. test(\"Content-Type header is present\", () => {\r",
									"pm.response. to.have.header (\"Content-Type\") ;\r",
									"});\r",
									"\r",
									"pm. test (\"Content-Type header is application/json\", () =>\r",
									"{\r",
									"    pm.expect (pm. response.headers.get ('Content-Type')) . to.eql ('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", () => {\r",
									"pm.expect(pm.response.responseTime).to.be.below(10);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"name\": \"vrc\",\r\n        \"location\": \"india\",\r\n        \"phone\": \"1234567890\",\r\n        \"courses\": [\r\n            \"Java\",\r\n            \"Selenium\"\r\n        ]\r\n        \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/c7fc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"c7fc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete stud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => \r",
									"    {\r",
									"        pm.response.to.have.status (200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test (\"Successful POST request\", () => \r",
									"    {\r",
									"        pm.expect (pm.response.code).to.be.oneOf([200,202]) ;\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\"Status code name has string- OK\", () => {\r",
									"pm.response.to.have.status (\"OK\") ;\r",
									"});\r",
									"\r",
									"pm. test(\"Content-Type header is present\", () => {\r",
									"pm.response. to.have.header (\"Content-Type\") ;\r",
									"});\r",
									"\r",
									"pm. test (\"Content-Type header is application/json\", () =>\r",
									"{\r",
									"    pm.expect (pm. response.headers.get ('Content-Type')) . to.eql ('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", () => {\r",
									"pm.expect(pm.response.responseTime).to.be.below(10);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/c7fc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"c7fc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "StudentAPIs Chaining",
			"item": [
				{
					"name": "create new student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData= JSON.parse(responseBody);\r",
									"jsonData.id;\r",
									"pm.environment.set(\"id\",jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \r\n    \"name\": \"scott\",\r\n    \"location\": \"india\",\r\n    \"phone\": \"1234567890\",\r\n    \"courses\": [\r\n      \"c\",\r\n      \"cpp\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/students/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get single student data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete stud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/students/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"students",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Script",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"pre-request script at request level\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"post-response script at collection level\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"pre-request script at folder level\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"post-response script at collection level\");"
						]
					}
				}
			]
		},
		{
			"name": "GorestAPI-Chaining",
			"item": [
				{
					"name": "create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Tenali Ramakrishna\", \"gender\":\"male\", \"email\":\"tenali.ramakrishna@15ce.com\", \"status\":\"active\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/posts",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "BooksAPI-DataDriven",
			"item": [
				{
					"name": "submit order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 201\",()=>\r",
									"{\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var jsonData= JSON.parse(responseBody);\r",
									"pm.environment.set(\"orderid_env\",jsonData.orderId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d97a0d8ac53fca7cbeff250f3b47084c5c113c22fd57298e400e6d373d63a598",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"bookId\": \"{{BookID}}\",\r\n\"customerName\": \"{{CustomerName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "get single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"pm.test(\"check order id present in the response body\", ()=>\r",
									"{\r",
									"    var jsonData= pm.response.json(); \r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"orderid_env\"));\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d97a0d8ac53fca7cbeff250f3b47084c5c113c22fd57298e400e6d373d63a598",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/{{orderid_env}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								"{{orderid_env}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"orderid_env\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "d97a0d8ac53fca7cbeff250f3b47084c5c113c22fd57298e400e6d373d63a598",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/{{orderid_env}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								"{{orderid_env}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "file upload",
			"item": [
				{
					"name": "SingleFileUpload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "http://localhost:9090/uploadFile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"uploadFile"
							]
						}
					},
					"response": []
				},
				{
					"name": "MultipleFilesUpload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": [
										"/D:/OneDrive - Bharatiya Vidya Bhavans Sardar Patel Institute Of Technology/#Testing/API Testing/POSTMAN_APITesting_SDET_QA/orders_json_data.json",
										"/D:/OneDrive - Bharatiya Vidya Bhavans Sardar Patel Institute Of Technology/#Testing/API Testing/POSTMAN_APITesting_SDET_QA/students.json"
									]
								}
							]
						},
						"url": {
							"raw": "http://localhost:9090/uploadMultipleFile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"uploadMultipleFile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "swagger",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"pre-request script at collection level\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"post-response script at collection level\");"
				]
			}
		}
	]
}